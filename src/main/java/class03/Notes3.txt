Arithmetic Operations in java:
    Modulus operator/remainder (%):
    When we use the int data type we can use this operator to get the remainder part. For example
    if we take the remainder of 11 by 5 we will get 1. We can use this operator to find out if
    a number is multiple of another number if a number is even or odd number etc.

String concatenation:
    1)String concatenation allows us to attach two Strings or one String with any other data type.
    String result="Messi"+10=> Messi10
    The result will always be a type of String and those two data types will be combined.
    2) Normally java executes the code from top to bottom and from left to right however this
    can be different if we use parenthesis, or we are doing pure math calculations for example
    multiplication has precedence over addition and subtraction (BODMAS) rules.
    1) 2+2*2=>6
    2) (2+2)*2=>8
    3) "Leo"+20+20=>Leo2020
    4) 20+20+"Leo"=>40Leo
    5) "Leo"+(10+20)=>Leo30

ShortHandOperators:
    Allow us to perform operations by writing less code.
    int num=2;
    num+=10;
    it means add 10 to the previous value of num which is 2 10+2=>12
    +=, -= , /= ,*= %= ,++, --
    ++ means increase the value of a variable by 1

Examples:
    1) int num=10;
    num+=10; =>20
    2) double num=20;
    num-=5; => 15.0
    3) float num=11F;
    num/=2; =>5.5
    4) int number=13;
    number%=4;=> 1
    5) int num=0;
    num++; => 1
    6) double num=0;
    num--; =>-1.0

Type casting:
    Type casting is the process of converting one data type to another one.

Why we need type casting?
    It's very rare that we will be doing type casting. at max, you might convert and double
    to an int to only get the whole number part.

Syntax:
    double num=10.2512222215514102;
    int num2=(int)num; => 10;

Relational Operators:
    Relational operators are again some symbols that we use to perform comparison between data.
    int num1=10;
    int num2=20;
   1) num1>num2 => 10>20 => false is num1's value greater than num2's value
   2) num2<num1 => 20<10 => false  is num2 less than num1
   3) num1==num2 => 10=20 => false is num2 equal to num1
   4) num1!=num2 => 10!=20 => true is num1 no equal to num2
   5) num1>=num2 => num1>num2 or num1==num2 => false
   6) num1<=num2 => num1<num2 or num1==num2 => true

If else Statements:
    If else statements help us write programs that can take divisions based on data.
    they work based on the boolean values

Syntax:
    if(condition){
    // write code here that you want to execute if condition is true
    }

Note:
    1) TO rename something we should use the refactor feature from intellij. It
    automatically renames everything. Right click and then select the refactor feature.
    Shortcut shift+f6
    2) to change the font size using mouse double-click the shift button quickly and type
    change font and turn-on the setting. Once the setting is on hoild the ctrl+wheel to incease
    and decrease the size